/* Core */
import { createSlice, type PayloadAction } from '@reduxjs/toolkit';

/* Instruments */
import { fetchLichessAccountInfo } from './thunks';

const initialState: ActiveUserSlice = {
  id: null,
  lichess: {
    userId: null,
    username: null,
    puzzleRating: null,
    accessToken: null
  }
};

export const activeUserSlice = createSlice({
  name: 'activeUser',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    logoutLichessUser: (state, action: PayloadAction<void>) => {
      console.log(action);
      state.lichess = {
        userId: null,
        username: null,
        puzzleRating: null,
        accessToken: null
      };
    },
    setLichessAccessToken: (state, action: PayloadAction<string | null>) => {
      state.lichess.accessToken = action.payload;
    },
    setId: (state, action: PayloadAction<string | null>) => {
      state.id = action.payload;
    },
    setLichessUsername: (state, action: PayloadAction<string>) => {
      state.lichess.username = action.payload;
    },
    setLichessId: (state, action: PayloadAction<string>) => {
      state.lichess.userId = action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(fetchLichessAccountInfo.fulfilled, (state, action) => {
      state.lichess.username = action.payload.lichessUsername;
      state.lichess.userId = action.payload.lichessId;
      state.lichess.puzzleRating = action.payload.lichessPuzzleRating;
    });
  }
});

/* Types */
export interface ActiveUserSlice {
  id: string | null;
  lichess: {
    userId: string | null;
    username: string | null;
    puzzleRating: number | null;
    accessToken: string | null;
  };
}
