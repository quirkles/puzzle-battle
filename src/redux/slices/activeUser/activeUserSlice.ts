import {v4} from 'uuid'
/* Core */
import { createSlice, type PayloadAction } from '@reduxjs/toolkit'

/* Instruments */
import {fetchLichessAccountInfo} from './thunks'

const initialState: ActiveUserSlice = {
    id: v4(),
    lichessUserId: null,
    lichessUsername: null,
}

export const activeUserSlice = createSlice({
    name: 'activeUser',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        setLichessUsername: (state, action: PayloadAction<string>) => {
            state.lichessUsername = action.payload
        },
        setLichessId: (state, action: PayloadAction<string>) => {
            state.lichessUserId = action.payload
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(fetchLichessAccountInfo.fulfilled, (state, action) => {
                state.lichessUsername = action.payload.lichessUsername
                state.lichessUserId = action.payload.lichessId
            })
    },
})

/* Types */
export interface ActiveUserSlice {
    id: string
    lichessUserId: string | null
    lichessUsername: string | null
}
